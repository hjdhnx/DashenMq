#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jun 22, 2019 08:29:37 PM CST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import dashenMQ_new_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    dashenMQ_new_support.set_Tk_var()
    top = Toplevel1 (root)
    dashenMQ_new_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    dashenMQ_new_support.set_Tk_var()
    top = Toplevel1 (w)
    dashenMQ_new_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family 新宋体 -size 10 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font11 = "-family 华文琥珀 -size 9 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"
        font9 = "-family {Microsoft YaHei UI} -size 9 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x433+584+148")
        top.title("MQTT一体机  V1.6 达神互联")
        top.configure(background="#59d854")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top,font=('华文琥珀',9,),bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="设置")
        self.sub_menu1 = tk.Menu(top,tearoff=0)
        self.sub_menu.add_cascade(menu=self.sub_menu1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="语言设置")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="中文")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="English")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="启动设置")
        self.sub_menu12 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkMenuFont",
                foreground="#000000",
                label="关于")
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#63d8b9",
                command=dashenMQ_new_support.btn_softinfo,
                font="TkMenuFont",
                foreground="#ffffff",
                label="软件信息")
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#6ed8b5",
                command=dashenMQ_new_support.btn_exit,
                font="TkMenuFont",
                foreground="#ffffff",
                label="退出")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.017, rely=0.092, relheight=0.896
                , relwidth=0.957)
        self.TNotebook1.configure(width=574)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="监控中心",compound="left",underline="-1",)
        self.TNotebook1_t0.configure(background="#d8d111")
        self.TNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t0.configure(highlightcolor="black")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="消息中心",compound="none",underline="-1",)
        self.TNotebook1_t1.configure(background="#88d8cd")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(2, text="连接设置",compound="left",underline="-1",)
        self.TNotebook1_t2.configure(background="#4389d8")
        self.TNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t2.configure(highlightcolor="black")
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(3, text="定时助手",compound="none",underline="-1",)
        self.TNotebook1_t3.configure(background="#fffff0")
        self.TNotebook1_t3.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t3.configure(highlightcolor="black")
        self.TNotebook1_t4 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t4, padding=3)
        self.TNotebook1.tab(4, text="语音助手",compound="none",underline="-1",)
        self.TNotebook1_t4.configure(background="#d9d9d9")
        self.TNotebook1_t4.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t4.configure(highlightcolor="black")
        self.TNotebook1_t5 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t5, padding=3)
        self.TNotebook1.tab(5, text="语音通话",compound="none",underline="-1",)
        self.TNotebook1_t5.configure(background="#496fd8")
        self.TNotebook1_t5.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t5.configure(highlightcolor="black")

        self.Labelframe1 = tk.LabelFrame(self.TNotebook1_t0)
        self.Labelframe1.place(relx=0.0, rely=0.028, relheight=0.958
                , relwidth=0.456)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''发布区''')
        self.Labelframe1.configure(background="#00BFFF")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Labelframe1.configure(width=260)

        self.TCombobox_sentopic = ttk.Combobox(self.Labelframe1)
        self.TCombobox_sentopic.place(relx=0.308, rely=0.058, relheight=0.067
                , relwidth=0.627, bordermode='ignore')
        self.value_list = ["达神","小燕子","/data/#","/data/alarm","/data/message","/data/notify",]
        self.TCombobox_sentopic.configure(values=self.value_list)
        self.TCombobox_sentopic.configure(textvariable=dashenMQ_new_support.combobox_sendtopic)
        self.TCombobox_sentopic.configure(takefocus="")

        self.TCombobox_senqos = ttk.Combobox(self.Labelframe1)
        self.TCombobox_senqos.place(relx=0.308, rely=0.174, relheight=0.067
                , relwidth=0.627, bordermode='ignore')
        self.value_list = [0,1,2,]
        self.TCombobox_senqos.configure(values=self.value_list)
        self.TCombobox_senqos.configure(textvariable=dashenMQ_new_support.combobox_sendqos)
        self.TCombobox_senqos.configure(takefocus="")

        self.TLabel12 = ttk.Label(self.Labelframe1)
        self.TLabel12.place(relx=0.038, rely=0.058, height=21, width=52
                , bordermode='ignore')
        self.TLabel12.configure(background="#9370DB")
        self.TLabel12.configure(foreground="#ffffff")
        self.TLabel12.configure(font="TkDefaultFont")
        self.TLabel12.configure(relief="flat")
        self.TLabel12.configure(takefocus="0")
        self.TLabel12.configure(text='''发布主题''')

        self.TLabel13 = ttk.Label(self.Labelframe1)
        self.TLabel13.place(relx=0.038, rely=0.174, height=21, width=52
                , bordermode='ignore')
        self.TLabel13.configure(background="#9370DB")
        self.TLabel13.configure(foreground="#ffffff")
        self.TLabel13.configure(font="TkDefaultFont")
        self.TLabel13.configure(relief="flat")
        self.TLabel13.configure(takefocus="0")
        self.TLabel13.configure(text='''发布质量''')

        self.style.map('TCheckbutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.TCheckbutton3 = ttk.Checkbutton(self.Labelframe1)
        self.TCheckbutton3.place(relx=0.038, rely=0.261, relwidth=0.404
                , relheight=0.0, height=30, bordermode='ignore')
        self.TCheckbutton3.configure(variable=dashenMQ_new_support.tch97)
        self.TCheckbutton3.configure(takefocus="")
        self.TCheckbutton3.configure(text='''保留上次发布''')

        self.TLabel14 = ttk.Label(self.Labelframe1)
        self.TLabel14.place(relx=0.038, rely=0.377, height=21, width=52
                , bordermode='ignore')
        self.TLabel14.configure(background="#9370DB")
        self.TLabel14.configure(foreground="#ffffff")
        self.TLabel14.configure(font="TkDefaultFont")
        self.TLabel14.configure(relief="flat")
        self.TLabel14.configure(takefocus="0")
        self.TLabel14.configure(text='''发布类型''')

        self.TCombobox_sendtype = ttk.Combobox(self.Labelframe1)
        self.TCombobox_sendtype.place(relx=0.308, rely=0.377, relheight=0.075
                , relwidth=0.615, bordermode='ignore')
        self.value_list = ["string","json","file",]
        self.TCombobox_sendtype.configure(values=self.value_list)
        self.TCombobox_sendtype.configure(textvariable=dashenMQ_new_support.combobox_sendtype)
        self.TCombobox_sendtype.configure(takefocus="")

        self.TSeparator2 = ttk.Separator(self.Labelframe1)
        self.TSeparator2.place(relx=0.038, rely=0.449, relwidth=0.885
                , bordermode='ignore')
        self.TSeparator2.configure(takefocus="0")

        self.Text_sendmsg = tk.Text(self.Labelframe1)
        self.Text_sendmsg.place(relx=0.038, rely=0.551, relheight=0.325
                , relwidth=0.9, bordermode='ignore')
        self.Text_sendmsg.configure(background="white")
        self.Text_sendmsg.configure(font="TkTextFont")
        self.Text_sendmsg.configure(foreground="black")
        self.Text_sendmsg.configure(highlightbackground="#d9d9d9")
        self.Text_sendmsg.configure(highlightcolor="black")
        self.Text_sendmsg.configure(insertbackground="black")
        self.Text_sendmsg.configure(selectbackground="#c4c4c4")
        self.Text_sendmsg.configure(selectforeground="black")
        self.Text_sendmsg.configure(takefocus="0")
        self.Text_sendmsg.configure(width=234)
        self.Text_sendmsg.configure(wrap="word")

        self.TLabel15 = ttk.Label(self.Labelframe1)
        self.TLabel15.place(relx=0.038, rely=0.493, height=21, width=52
                , bordermode='ignore')
        self.TLabel15.configure(background="#9370DB")
        self.TLabel15.configure(foreground="#ffffff")
        self.TLabel15.configure(font="TkDefaultFont")
        self.TLabel15.configure(relief="flat")
        self.TLabel15.configure(takefocus="0")
        self.TLabel15.configure(text='''发布内容''')

        self.Button_backsend = tk.Button(self.Labelframe1)
        self.Button_backsend.place(relx=0.038, rely=0.899, height=28, width=40
                , bordermode='ignore')
        self.Button_backsend.configure(activebackground="#ececec")
        self.Button_backsend.configure(activeforeground="#000000")
        self.Button_backsend.configure(background="#BDB76B")
        self.Button_backsend.configure(command=dashenMQ_new_support.btn_sendback)
        self.Button_backsend.configure(disabledforeground="#a3a3a3")
        self.Button_backsend.configure(foreground="#ffffff")
        self.Button_backsend.configure(highlightbackground="#d9d9d9")
        self.Button_backsend.configure(highlightcolor="black")
        self.Button_backsend.configure(pady="0")
        self.Button_backsend.configure(takefocus="0")
        self.Button_backsend.configure(text='''⇦''')

        self.Button_clearsend = tk.Button(self.Labelframe1)
        self.Button_clearsend.place(relx=0.385, rely=0.899, height=28, width=40
                , bordermode='ignore')
        self.Button_clearsend.configure(activebackground="#ececec")
        self.Button_clearsend.configure(activeforeground="#000000")
        self.Button_clearsend.configure(background="#BDB76B")
        self.Button_clearsend.configure(command=dashenMQ_new_support.btn_sendclear)
        self.Button_clearsend.configure(disabledforeground="#a3a3a3")
        self.Button_clearsend.configure(foreground="#ffffff")
        self.Button_clearsend.configure(highlightbackground="#d9d9d9")
        self.Button_clearsend.configure(highlightcolor="black")
        self.Button_clearsend.configure(pady="0")
        self.Button_clearsend.configure(takefocus="0")
        self.Button_clearsend.configure(text='''✖''')

        self.Button_publish = tk.Button(self.Labelframe1)
        self.Button_publish.place(relx=0.692, rely=0.899, height=28, width=60
                , bordermode='ignore')
        self.Button_publish.configure(activebackground="#ececec")
        self.Button_publish.configure(activeforeground="#000000")
        self.Button_publish.configure(background="#78C300")
        self.Button_publish.configure(command=dashenMQ_new_support.btn_send)
        self.Button_publish.configure(disabledforeground="#a3a3a3")
        self.Button_publish.configure(foreground="#ffffff")
        self.Button_publish.configure(highlightbackground="#d9d9d9")
        self.Button_publish.configure(highlightcolor="black")
        self.Button_publish.configure(pady="0")
        self.Button_publish.configure(takefocus="0")
        self.Button_publish.configure(text='''发布''')

        self.Button_selectfile = tk.Button(self.Labelframe1)
        self.Button_selectfile.place(relx=0.769, rely=0.261, height=28, width=40
                , bordermode='ignore')
        self.Button_selectfile.configure(activebackground="#ececec")
        self.Button_selectfile.configure(activeforeground="#000000")
        self.Button_selectfile.configure(background="#78C300")
        self.Button_selectfile.configure(command=dashenMQ_new_support.btn_selectfile)
        self.Button_selectfile.configure(disabledforeground="#a3a3a3")
        self.Button_selectfile.configure(foreground="#ffffff")
        self.Button_selectfile.configure(highlightbackground="#d9d9d9")
        self.Button_selectfile.configure(highlightcolor="black")
        self.Button_selectfile.configure(pady="0")
        self.Button_selectfile.configure(takefocus="0")
        self.Button_selectfile.configure(text='''. . .''')

        self.Labelframe2 = tk.LabelFrame(self.TNotebook1_t0)
        self.Labelframe2.place(relx=0.509, rely=0.028, relheight=0.958
                , relwidth=0.439)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''订阅区''')
        self.Labelframe2.configure(background="#78C300")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")
        self.Labelframe2.configure(width=250)

        self.style.configure('Treeview.Heading',  font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(self.Labelframe2)
        self.Scrolledtreeview1.place(relx=0.04, rely=0.116, relheight=0.29
                , relwidth=0.94, bordermode='ignore')
        self.Scrolledtreeview1.configure(columns="Col1 Col2")
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0",text="序号")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="54")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")
        self.Scrolledtreeview1.heading("Col1",text="主题")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="111")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="center")
        self.Scrolledtreeview1.heading("Col2",text="质量")
        self.Scrolledtreeview1.heading("Col2",anchor="center")
        self.Scrolledtreeview1.column("Col2",width="51")
        self.Scrolledtreeview1.column("Col2",minwidth="20")
        self.Scrolledtreeview1.column("Col2",stretch="1")
        self.Scrolledtreeview1.column("Col2",anchor="center")

        self.TLabel9 = ttk.Label(self.Labelframe2)
        self.TLabel9.place(relx=0.32, rely=0.029, height=21, width=88
                , bordermode='ignore')
        self.TLabel9.configure(background="#00BFFF")
        self.TLabel9.configure(foreground="#ffffff")
        self.TLabel9.configure(font="TkDefaultFont")
        self.TLabel9.configure(relief="flat")
        self.TLabel9.configure(takefocus="0")
        self.TLabel9.configure(text='''已订阅内容列表''')

        self.TCombobox_subtopic = ttk.Combobox(self.Labelframe2)
        self.TCombobox_subtopic.place(relx=0.12, rely=0.638, relheight=0.067
                , relwidth=0.652, bordermode='ignore')
        self.value_list = ["达神","小燕子","/data/#","/data/alarm","/data/message","/data/notify",]
        self.TCombobox_subtopic.configure(values=self.value_list)
        self.TCombobox_subtopic.configure(textvariable=dashenMQ_new_support.combobox_subtopic)
        self.TCombobox_subtopic.configure(takefocus="")

        self.TCombobox_subqos = ttk.Combobox(self.Labelframe2)
        self.TCombobox_subqos.place(relx=0.12, rely=0.812, relheight=0.067
                , relwidth=0.652, bordermode='ignore')
        self.value_list = [0,1,2,]
        self.TCombobox_subqos.configure(values=self.value_list)
        self.TCombobox_subqos.configure(textvariable=dashenMQ_new_support.combobox_subqos)
        self.TCombobox_subqos.configure(takefocus="")

        self.TLabel10 = ttk.Label(self.Labelframe2)
        self.TLabel10.place(relx=0.28, rely=0.551, height=21, width=52
                , bordermode='ignore')
        self.TLabel10.configure(background="#9370DB")
        self.TLabel10.configure(foreground="#ffffff")
        self.TLabel10.configure(font="TkDefaultFont")
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(takefocus="0")
        self.TLabel10.configure(text='''订阅主题''')

        self.TLabel11 = ttk.Label(self.Labelframe2)
        self.TLabel11.place(relx=0.28, rely=0.725, height=21, width=52
                , bordermode='ignore')
        self.TLabel11.configure(background="#9370DB")
        self.TLabel11.configure(foreground="#ffffff")
        self.TLabel11.configure(font="TkDefaultFont")
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(takefocus="0")
        self.TLabel11.configure(text='''订阅质量''')

        self.TSeparator1 = ttk.Separator(self.Labelframe2)
        self.TSeparator1.place(relx=0.0, rely=0.507, relwidth=0.96
                , bordermode='ignore')
        self.TSeparator1.configure(takefocus="0")

        self.Button_cancelsub = tk.Button(self.Labelframe2)
        self.Button_cancelsub.place(relx=0.04, rely=0.406, height=28, width=83
                , bordermode='ignore')
        self.Button_cancelsub.configure(activebackground="#ececec")
        self.Button_cancelsub.configure(activeforeground="#000000")
        self.Button_cancelsub.configure(background="#00BFFF")
        self.Button_cancelsub.configure(command=dashenMQ_new_support.btn_cancelsub)
        self.Button_cancelsub.configure(disabledforeground="#a3a3a3")
        self.Button_cancelsub.configure(foreground="#ffffff")
        self.Button_cancelsub.configure(highlightbackground="#d9d9d9")
        self.Button_cancelsub.configure(highlightcolor="black")
        self.Button_cancelsub.configure(pady="0")
        self.Button_cancelsub.configure(takefocus="0")
        self.Button_cancelsub.configure(text='''取消所选订阅''')

        self.Button_clearsub = tk.Button(self.Labelframe2)
        self.Button_clearsub.place(relx=0.64, rely=0.406, height=28, width=83
                , bordermode='ignore')
        self.Button_clearsub.configure(activebackground="#ececec")
        self.Button_clearsub.configure(activeforeground="#000000")
        self.Button_clearsub.configure(background="#00BFFF")
        self.Button_clearsub.configure(command=dashenMQ_new_support.btn_clearsub)
        self.Button_clearsub.configure(disabledforeground="#a3a3a3")
        self.Button_clearsub.configure(foreground="#ffffff")
        self.Button_clearsub.configure(highlightbackground="#d9d9d9")
        self.Button_clearsub.configure(highlightcolor="black")
        self.Button_clearsub.configure(pady="0")
        self.Button_clearsub.configure(takefocus="0")
        self.Button_clearsub.configure(text='''清空订阅列表''')

        self.Button_addsub = tk.Button(self.Labelframe2)
        self.Button_addsub.place(relx=0.28, rely=0.899, height=28, width=59
                , bordermode='ignore')
        self.Button_addsub.configure(activebackground="#ececec")
        self.Button_addsub.configure(activeforeground="#000000")
        self.Button_addsub.configure(background="#00BFFF")
        self.Button_addsub.configure(command=dashenMQ_new_support.btn_addsub)
        self.Button_addsub.configure(disabledforeground="#a3a3a3")
        self.Button_addsub.configure(foreground="#ffffff")
        self.Button_addsub.configure(highlightbackground="#d9d9d9")
        self.Button_addsub.configure(highlightcolor="black")
        self.Button_addsub.configure(pady="0")
        self.Button_addsub.configure(takefocus="0")
        self.Button_addsub.configure(text='''添加订阅''')

        self.Frame1 = tk.Frame(self.TNotebook1_t1)
        self.Frame1.place(relx=0.018, rely=0.028, relheight=0.931
                , relwidth=0.939)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d8ac72")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.Frame1.configure(width=535)

        self.Scrolledtext1 = ScrolledText(self.Frame1)
        self.Scrolledtext1.place(relx=0.019, rely=0.03, relheight=0.851
                , relwidth=0.955)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(takefocus="0")
        self.Scrolledtext1.configure(width=10)
        self.Scrolledtext1.configure(wrap="none")

        self.Button_savemsg = tk.Button(self.Frame1)
        self.Button_savemsg.place(relx=0.449, rely=0.896, height=28, width=59)
        self.Button_savemsg.configure(activebackground="#ececec")
        self.Button_savemsg.configure(activeforeground="#000000")
        self.Button_savemsg.configure(background="#78C300")
        self.Button_savemsg.configure(command=dashenMQ_new_support.btn_savemsg)
        self.Button_savemsg.configure(disabledforeground="#a3a3a3")
        self.Button_savemsg.configure(foreground="#ffffff")
        self.Button_savemsg.configure(highlightbackground="#d9d9d9")
        self.Button_savemsg.configure(highlightcolor="black")
        self.Button_savemsg.configure(pady="0")
        self.Button_savemsg.configure(takefocus="0")
        self.Button_savemsg.configure(text='''消息入库''')

        self.Button_readhistory = tk.Button(self.Frame1)
        self.Button_readhistory.place(relx=0.617, rely=0.896, height=28
                , width=83)
        self.Button_readhistory.configure(activebackground="#ececec")
        self.Button_readhistory.configure(activeforeground="#000000")
        self.Button_readhistory.configure(background="#78C300")
        self.Button_readhistory.configure(command=dashenMQ_new_support.btn_readhistory)
        self.Button_readhistory.configure(disabledforeground="#a3a3a3")
        self.Button_readhistory.configure(foreground="#ffffff")
        self.Button_readhistory.configure(highlightbackground="#d9d9d9")
        self.Button_readhistory.configure(highlightcolor="black")
        self.Button_readhistory.configure(pady="0")
        self.Button_readhistory.configure(takefocus="0")
        self.Button_readhistory.configure(text='''查看历史消息''')

        self.Button_clearmsg = tk.Button(self.Frame1)
        self.Button_clearmsg.place(relx=0.841, rely=0.896, height=28, width=59)
        self.Button_clearmsg.configure(activebackground="#ececec")
        self.Button_clearmsg.configure(activeforeground="#000000")
        self.Button_clearmsg.configure(background="#78C300")
        self.Button_clearmsg.configure(command=dashenMQ_new_support.btn_clearmsg)
        self.Button_clearmsg.configure(disabledforeground="#a3a3a3")
        self.Button_clearmsg.configure(foreground="#ffffff")
        self.Button_clearmsg.configure(highlightbackground="#d9d9d9")
        self.Button_clearmsg.configure(highlightcolor="black")
        self.Button_clearmsg.configure(pady="0")
        self.Button_clearmsg.configure(takefocus="0")
        self.Button_clearmsg.configure(text='''清空消息''')

        self.TCheckbutton_automsgsave = ttk.Checkbutton(self.Frame1)
        self.TCheckbutton_automsgsave.place(relx=0.019, rely=0.896, relwidth=0.187
                , relheight=0.0, height=30)
        self.TCheckbutton_automsgsave.configure(variable=dashenMQ_new_support.tch50)
        self.TCheckbutton_automsgsave.configure(takefocus="")
        self.TCheckbutton_automsgsave.configure(text='''消息自动入库''')

        self.Button_savefiles = tk.Button(self.Frame1)
        self.Button_savefiles.place(relx=0.262, rely=0.896, height=28, width=71)
        self.Button_savefiles.configure(activebackground="#ececec")
        self.Button_savefiles.configure(activeforeground="#000000")
        self.Button_savefiles.configure(background="#78C300")
        self.Button_savefiles.configure(command=dashenMQ_new_support.btn_savefiles)
        self.Button_savefiles.configure(disabledforeground="#a3a3a3")
        self.Button_savefiles.configure(foreground="#ffffff")
        self.Button_savefiles.configure(highlightbackground="#d9d9d9")
        self.Button_savefiles.configure(highlightcolor="black")
        self.Button_savefiles.configure(pady="0")
        self.Button_savefiles.configure(takefocus="0")
        self.Button_savefiles.configure(text='''保存到文件''')

        self.TEntry_clientname = ttk.Entry(self.TNotebook1_t2)
        self.TEntry_clientname.place(relx=0.035, rely=0.111, relheight=0.064
                , relwidth=0.256)
        self.TEntry_clientname.configure(textvariable=dashenMQ_new_support.entrytv_clientname)
        self.TEntry_clientname.configure(takefocus="")
        self.TEntry_clientname.configure(cursor="ibeam")

        self.TEntry_clientid = ttk.Entry(self.TNotebook1_t2)
        self.TEntry_clientid.place(relx=0.386, rely=0.111, relheight=0.064
                , relwidth=0.256)
        self.TEntry_clientid.configure(textvariable=dashenMQ_new_support.entrytv_clientid)
        self.TEntry_clientid.configure(takefocus="")
        self.TEntry_clientid.configure(cursor="ibeam")

        self.TLabel1 = ttk.Label(self.TNotebook1_t2)
        self.TLabel1.place(relx=0.07, rely=0.028, height=21, width=100)
        self.TLabel1.configure(background="#78C300")
        self.TLabel1.configure(foreground="#ffffff")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(takefocus="0")
        self.TLabel1.configure(text='''MQTT客户端名称''')

        self.TLabel2 = ttk.Label(self.TNotebook1_t2)
        self.TLabel2.place(relx=0.439, rely=0.028, height=21, width=89)
        self.TLabel2.configure(background="#78C300")
        self.TLabel2.configure(foreground="#ffffff")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(takefocus="0")
        self.TLabel2.configure(text='''MQTT客户端ID''')

        self.TLabel3 = ttk.Label(self.TNotebook1_t2)
        self.TLabel3.place(relx=0.07, rely=0.194, height=21, width=100)
        self.TLabel3.configure(background="#78C300")
        self.TLabel3.configure(foreground="#ffffff")
        self.TLabel3.configure(font="TkDefaultFont")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(takefocus="0")
        self.TLabel3.configure(text='''MQTT服务器类型''')

        self.TLabel4 = ttk.Label(self.TNotebook1_t2)
        self.TLabel4.place(relx=0.439, rely=0.194, height=21, width=88)
        self.TLabel4.configure(background="#78C300")
        self.TLabel4.configure(foreground="#ffffff")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(takefocus="0")
        self.TLabel4.configure(text='''MQTT连接协议''')

        self.TLabel5 = ttk.Label(self.TNotebook1_t2)
        self.TLabel5.place(relx=0.07, rely=0.361, height=21, width=100)
        self.TLabel5.configure(background="#78C300")
        self.TLabel5.configure(foreground="#ffffff")
        self.TLabel5.configure(font="TkDefaultFont")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(takefocus="0")
        self.TLabel5.configure(text='''MQTT服务器地址''')

        self.TLabel6 = ttk.Label(self.TNotebook1_t2)
        self.TLabel6.place(relx=0.421, rely=0.361, height=21, width=112)
        self.TLabel6.configure(background="#78C300")
        self.TLabel6.configure(foreground="#ffffff")
        self.TLabel6.configure(font="TkDefaultFont")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(takefocus="0")
        self.TLabel6.configure(text='''MQTT服务器端口号''')

        self.TLabel7 = ttk.Label(self.TNotebook1_t2)
        self.TLabel7.place(relx=0.105, rely=0.528, height=21, width=64)
        self.TLabel7.configure(background="#78C300")
        self.TLabel7.configure(foreground="#ffffff")
        self.TLabel7.configure(font="TkDefaultFont")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(takefocus="0")
        self.TLabel7.configure(text='''设备用户名''')

        self.TLabel8 = ttk.Label(self.TNotebook1_t2)
        self.TLabel8.place(relx=0.474, rely=0.528, height=21, width=52)
        self.TLabel8.configure(background="#78C300")
        self.TLabel8.configure(foreground="#ffffff")
        self.TLabel8.configure(font="TkDefaultFont")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(takefocus="0")
        self.TLabel8.configure(text='''设备密码''')

        self.TCheckbutton_autoconnect = ttk.Checkbutton(self.TNotebook1_t2)
        self.TCheckbutton_autoconnect.place(relx=0.035, rely=0.806, relwidth=0.14
                , relheight=0.0, height=30)
        self.TCheckbutton_autoconnect.configure(variable=dashenMQ_new_support.tch68)
        self.TCheckbutton_autoconnect.configure(takefocus="")
        self.TCheckbutton_autoconnect.configure(text='''自动连接''')

        self.TCombobox_mqtype = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_mqtype.place(relx=0.035, rely=0.278, relheight=0.064
                , relwidth=0.286)
        self.value_list = ["EMQ","Apollo",]
        self.TCombobox_mqtype.configure(values=self.value_list)
        self.TCombobox_mqtype.configure(textvariable=dashenMQ_new_support.combobox_servertype)
        self.TCombobox_mqtype.configure(takefocus="")

        self.TCombobox_mqsl = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_mqsl.place(relx=0.386, rely=0.278, relheight=0.064
                , relwidth=0.286)
        self.value_list = ["tcp","ws","ssl",]
        self.TCombobox_mqsl.configure(values=self.value_list)
        self.TCombobox_mqsl.configure(textvariable=dashenMQ_new_support.combobox_mqsl)
        self.TCombobox_mqsl.configure(takefocus="")

        self.TCombobox_mqport = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_mqport.place(relx=0.386, rely=0.444, relheight=0.064
                , relwidth=0.286)
        self.value_list = [1883,8083,8883,61613,61623,]
        self.TCombobox_mqport.configure(values=self.value_list)
        self.TCombobox_mqport.configure(textvariable=dashenMQ_new_support.combobox_mqport)
        self.TCombobox_mqport.configure(takefocus="")

        self.TCombobox_mqip = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_mqip.place(relx=0.035, rely=0.444, relheight=0.064
                , relwidth=0.286)
        self.value_list = ["127.0.0.1","118.25.210.158",]
        self.TCombobox_mqip.configure(values=self.value_list)
        self.TCombobox_mqip.configure(textvariable=dashenMQ_new_support.combobox_mqip)
        self.TCombobox_mqip.configure(takefocus="")

        self.TCombobox_username = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_username.place(relx=0.035, rely=0.611, relheight=0.064
                , relwidth=0.286)
        self.value_list = ["admin","dashen",]
        self.TCombobox_username.configure(values=self.value_list)
        self.TCombobox_username.configure(textvariable=dashenMQ_new_support.combobox_username)
        self.TCombobox_username.configure(takefocus="")

        self.TCombobox_pwd = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox_pwd.place(relx=0.386, rely=0.611, relheight=0.064
                , relwidth=0.286)
        self.value_list = ["public","admin","123456",]
        self.TCombobox_pwd.configure(values=self.value_list)
        self.TCombobox_pwd.configure(show="*")
        self.TCombobox_pwd.configure(textvariable=dashenMQ_new_support.combobox_pwd)
        self.TCombobox_pwd.configure(takefocus="")

        self.TCheckbutton_automoren = ttk.Checkbutton(self.TNotebook1_t2)
        self.TCheckbutton_automoren.place(relx=0.684, rely=0.444, relwidth=0.132
                , relheight=0.0, height=30)
        self.TCheckbutton_automoren.configure(variable=dashenMQ_new_support.tch76)
        self.TCheckbutton_automoren.configure(takefocus="")
        self.TCheckbutton_automoren.configure(text='''自动默认''')

        self.Button_showhide = tk.Button(self.TNotebook1_t2)
        self.Button_showhide.place(relx=0.684, rely=0.611, height=28, width=50)
        self.Button_showhide.configure(activebackground="#ececec")
        self.Button_showhide.configure(activeforeground="#000000")
        self.Button_showhide.configure(background="#00BFFF")
        self.Button_showhide.configure(command=dashenMQ_new_support.btn_showhide)
        self.Button_showhide.configure(disabledforeground="#a3a3a3")
        self.Button_showhide.configure(foreground="#ffffff")
        self.Button_showhide.configure(highlightbackground="#d9d9d9")
        self.Button_showhide.configure(highlightcolor="black")
        self.Button_showhide.configure(pady="0")
        self.Button_showhide.configure(takefocus="0")
        self.Button_showhide.configure(text='''显示''')

        self.Button_randomgener = tk.Button(self.TNotebook1_t2)
        self.Button_randomgener.place(relx=0.649, rely=0.111, height=28
                , width=59)
        self.Button_randomgener.configure(activebackground="#ececec")
        self.Button_randomgener.configure(activeforeground="#000000")
        self.Button_randomgener.configure(background="#00BFFF")
        self.Button_randomgener.configure(command=dashenMQ_new_support.btn_randomgerner)
        self.Button_randomgener.configure(disabledforeground="#a3a3a3")
        self.Button_randomgener.configure(foreground="#ffffff")
        self.Button_randomgener.configure(highlightbackground="#d9d9d9")
        self.Button_randomgener.configure(highlightcolor="black")
        self.Button_randomgener.configure(pady="0")
        self.Button_randomgener.configure(takefocus="0")
        self.Button_randomgener.configure(text='''随机生成''')

        self.Button_savesettings = tk.Button(self.TNotebook1_t2)
        self.Button_savesettings.place(relx=0.246, rely=0.806, height=28
                , width=59)
        self.Button_savesettings.configure(activebackground="#ececec")
        self.Button_savesettings.configure(activeforeground="#000000")
        self.Button_savesettings.configure(background="#00BFFF")
        self.Button_savesettings.configure(command=dashenMQ_new_support.btn_savesettings)
        self.Button_savesettings.configure(disabledforeground="#a3a3a3")
        self.Button_savesettings.configure(foreground="#ffffff")
        self.Button_savesettings.configure(highlightbackground="#d9d9d9")
        self.Button_savesettings.configure(highlightcolor="black")
        self.Button_savesettings.configure(pady="0")
        self.Button_savesettings.configure(takefocus="0")
        self.Button_savesettings.configure(text='''保存设置''')

        self.Labelframe3 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe3.place(relx=0.018, rely=0.028, relheight=0.431
                , relwidth=0.421)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(text='''天气采集推送模块''')
        self.Labelframe3.configure(background="#5bd878")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="black")
        self.Labelframe3.configure(width=240)

        self.TLabel16 = ttk.Label(self.Labelframe3)
        self.TLabel16.place(relx=0.042, rely=0.194, height=21, width=52
                , bordermode='ignore')
        self.TLabel16.configure(background="#78C300")
        self.TLabel16.configure(foreground="#ffffff")
        self.TLabel16.configure(font="TkDefaultFont")
        self.TLabel16.configure(relief="flat")
        self.TLabel16.configure(takefocus="0")
        self.TLabel16.configure(text='''监控地区''')

        self.TLabel17 = ttk.Label(self.Labelframe3)
        self.TLabel17.place(relx=0.042, rely=0.452, height=21, width=52
                , bordermode='ignore')
        self.TLabel17.configure(background="#78C300")
        self.TLabel17.configure(foreground="#ffffff")
        self.TLabel17.configure(font="TkDefaultFont")
        self.TLabel17.configure(relief="flat")
        self.TLabel17.configure(takefocus="0")
        self.TLabel17.configure(text='''推送间隔''')

        self.Button_tq = tk.Button(self.Labelframe3)
        self.Button_tq.place(relx=0.042, rely=0.774, height=28, width=83
                , bordermode='ignore')
        self.Button_tq.configure(activebackground="#ececec")
        self.Button_tq.configure(activeforeground="#000000")
        self.Button_tq.configure(background="#00BFFF")
        self.Button_tq.configure(command=dashenMQ_new_support.btn_tianqi)
        self.Button_tq.configure(disabledforeground="#a3a3a3")
        self.Button_tq.configure(foreground="#ffffff")
        self.Button_tq.configure(highlightbackground="#d9d9d9")
        self.Button_tq.configure(highlightcolor="black")
        self.Button_tq.configure(pady="0")
        self.Button_tq.configure(takefocus="0")
        self.Button_tq.configure(text='''开启天气推送''')

        self.TCombobox_area = ttk.Combobox(self.Labelframe3)
        self.TCombobox_area.place(relx=0.375, rely=0.194, relheight=0.148
                , relwidth=0.596, bordermode='ignore')
        self.value_list = ["北京","自贡",]
        self.TCombobox_area.configure(values=self.value_list)
        self.TCombobox_area.configure(textvariable=dashenMQ_new_support.combobox_area)
        self.TCombobox_area.configure(takefocus="")

        self.TCombobox_tqtime = ttk.Combobox(self.Labelframe3)
        self.TCombobox_tqtime.place(relx=0.375, rely=0.452, relheight=0.148
                , relwidth=0.596, bordermode='ignore')
        self.value_list = ["600","3600","18000","36000","72000","86400",]
        self.TCombobox_tqtime.configure(values=self.value_list)
        self.TCombobox_tqtime.configure(textvariable=dashenMQ_new_support.combobox_tqtime)
        self.TCombobox_tqtime.configure(takefocus="")

        self.Labelframe4 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe4.place(relx=0.509, rely=0.028, relheight=0.431
                , relwidth=0.474)
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(foreground="black")
        self.Labelframe4.configure(text='''新闻采集推送模块''')
        self.Labelframe4.configure(background="#d8b259")
        self.Labelframe4.configure(highlightbackground="#d9d9d9")
        self.Labelframe4.configure(highlightcolor="black")
        self.Labelframe4.configure(width=270)

        self.TLabel20 = ttk.Label(self.Labelframe4)
        self.TLabel20.place(relx=0.037, rely=0.194, height=21, width=52
                , bordermode='ignore')
        self.TLabel20.configure(background="#78C300")
        self.TLabel20.configure(foreground="#ffffff")
        self.TLabel20.configure(font="TkDefaultFont")
        self.TLabel20.configure(relief="flat")
        self.TLabel20.configure(takefocus="0")
        self.TLabel20.configure(text='''监控网址''')

        self.TLabel21 = ttk.Label(self.Labelframe4)
        self.TLabel21.place(relx=0.037, rely=0.387, height=21, width=52
                , bordermode='ignore')
        self.TLabel21.configure(background="#78C300")
        self.TLabel21.configure(foreground="#ffffff")
        self.TLabel21.configure(font="TkDefaultFont")
        self.TLabel21.configure(relief="flat")
        self.TLabel21.configure(takefocus="0")
        self.TLabel21.configure(text='''推送间隔''')

        self.Button_news = tk.Button(self.Labelframe4)
        self.Button_news.place(relx=0.037, rely=0.774, height=28, width=83
                , bordermode='ignore')
        self.Button_news.configure(activebackground="#ececec")
        self.Button_news.configure(activeforeground="#000000")
        self.Button_news.configure(background="#00BFFF")
        self.Button_news.configure(command=dashenMQ_new_support.btn_news)
        self.Button_news.configure(disabledforeground="#a3a3a3")
        self.Button_news.configure(foreground="#ffffff")
        self.Button_news.configure(highlightbackground="#d9d9d9")
        self.Button_news.configure(highlightcolor="black")
        self.Button_news.configure(pady="0")
        self.Button_news.configure(takefocus="0")
        self.Button_news.configure(text='''开启新闻推送''')

        self.TCombobox_website = ttk.Combobox(self.Labelframe4)
        self.TCombobox_website.place(relx=0.296, rely=0.194, relheight=0.148
                , relwidth=0.53, bordermode='ignore')
        self.TCombobox_website.configure(textvariable=dashenMQ_new_support.combobox_website)
        self.TCombobox_website.configure(takefocus="")

        self.TCombobox_newstime = ttk.Combobox(self.Labelframe4)
        self.TCombobox_newstime.place(relx=0.296, rely=0.387, relheight=0.148
                , relwidth=0.53, bordermode='ignore')
        self.value_list = ["600","3600","18000","36000","72000","86400",]
        self.TCombobox_newstime.configure(values=self.value_list)
        self.TCombobox_newstime.configure(textvariable=dashenMQ_new_support.combobox_newstime)
        self.TCombobox_newstime.configure(takefocus="")

        self.Labelframe5 = tk.LabelFrame(self.TNotebook1_t3)
        self.Labelframe5.place(relx=0.018, rely=0.472, relheight=0.486
                , relwidth=0.965)
        self.Labelframe5.configure(relief='groove')
        self.Labelframe5.configure(foreground="black")
        self.Labelframe5.configure(text='''室温采集自动开空凋模块''')
        self.Labelframe5.configure(background="#86d8af")
        self.Labelframe5.configure(highlightbackground="#d9d9d9")
        self.Labelframe5.configure(highlightcolor="black")
        self.Labelframe5.configure(width=550)

        self.TLabel18 = ttk.Label(self.Labelframe5)
        self.TLabel18.place(relx=0.018, rely=0.171, height=21, width=76
                , bordermode='ignore')
        self.TLabel18.configure(background="#78C300")
        self.TLabel18.configure(foreground="#ffffff")
        self.TLabel18.configure(font="TkDefaultFont")
        self.TLabel18.configure(relief="flat")
        self.TLabel18.configure(takefocus="0")
        self.TLabel18.configure(text='''室内最低温度''')

        self.TLabel19 = ttk.Label(self.Labelframe5)
        self.TLabel19.place(relx=0.018, rely=0.514, height=21, width=52
                , bordermode='ignore')
        self.TLabel19.configure(background="#78C300")
        self.TLabel19.configure(foreground="#ffffff")
        self.TLabel19.configure(font="TkDefaultFont")
        self.TLabel19.configure(relief="flat")
        self.TLabel19.configure(takefocus="0")
        self.TLabel19.configure(text='''推送间隔''')

        self.Button_tem = tk.Button(self.Labelframe5)
        self.Button_tem.place(relx=0.018, rely=0.8, height=28, width=83
                , bordermode='ignore')
        self.Button_tem.configure(activebackground="#ececec")
        self.Button_tem.configure(activeforeground="#000000")
        self.Button_tem.configure(background="#00BFFF")
        self.Button_tem.configure(command=dashenMQ_new_support.btn_temp)
        self.Button_tem.configure(disabledforeground="#a3a3a3")
        self.Button_tem.configure(foreground="#ffffff")
        self.Button_tem.configure(highlightbackground="#d9d9d9")
        self.Button_tem.configure(highlightcolor="black")
        self.Button_tem.configure(pady="0")
        self.Button_tem.configure(takefocus="0")
        self.Button_tem.configure(text='''开启室温推送''')

        self.TCombobox_lowtem = ttk.Combobox(self.Labelframe5)
        self.TCombobox_lowtem.place(relx=0.2, rely=0.171, relheight=0.131
                , relwidth=0.205, bordermode='ignore')
        self.TCombobox_lowtem.configure(textvariable=dashenMQ_new_support.combobox_lowtem)
        self.TCombobox_lowtem.configure(takefocus="")

        self.TCombobox_temtime = ttk.Combobox(self.Labelframe5)
        self.TCombobox_temtime.place(relx=0.2, rely=0.514, relheight=0.131
                , relwidth=0.205, bordermode='ignore')
        self.value_list = ["600","3600","18000","36000","72000","86400",]
        self.TCombobox_temtime.configure(values=self.value_list)
        self.TCombobox_temtime.configure(textvariable=dashenMQ_new_support.combobox_temtime)
        self.TCombobox_temtime.configure(takefocus="")

        self.TCheckbutton1 = ttk.Checkbutton(self.Labelframe5)
        self.TCheckbutton1.place(relx=0.473, rely=0.171, relwidth=0.327
                , relheight=0.0, height=27, bordermode='ignore')
        self.TCheckbutton1.configure(variable=dashenMQ_new_support.tch69)
        self.TCheckbutton1.configure(takefocus="")
        self.TCheckbutton1.configure(text='''超过最高温度自动开启空调''')

        self.TLabel22 = ttk.Label(self.Labelframe5)
        self.TLabel22.place(relx=0.018, rely=0.343, height=21, width=76
                , bordermode='ignore')
        self.TLabel22.configure(background="#78C300")
        self.TLabel22.configure(foreground="#ffffff")
        self.TLabel22.configure(font="TkDefaultFont")
        self.TLabel22.configure(relief="flat")
        self.TLabel22.configure(takefocus="0")
        self.TLabel22.configure(text='''室内最高温度''')

        self.TCombobox_hightem = ttk.Combobox(self.Labelframe5)
        self.TCombobox_hightem.place(relx=0.2, rely=0.343, relheight=0.131
                , relwidth=0.205, bordermode='ignore')
        self.TCombobox_hightem.configure(textvariable=dashenMQ_new_support.combobox_hightem)
        self.TCombobox_hightem.configure(takefocus="")

        self.TCheckbutton2 = ttk.Checkbutton(self.Labelframe5)
        self.TCheckbutton2.place(relx=0.473, rely=0.343, relwidth=0.327
                , relheight=0.0, height=27, bordermode='ignore')
        self.TCheckbutton2.configure(variable=dashenMQ_new_support.tch72)
        self.TCheckbutton2.configure(takefocus="")
        self.TCheckbutton2.configure(text='''低于最低温度自动关闭空调''')

        self.TLabel23 = ttk.Label(self.Labelframe5)
        self.TLabel23.place(relx=0.473, rely=0.571, height=21, width=76
                , bordermode='ignore')
        self.TLabel23.configure(background="#78C300")
        self.TLabel23.configure(foreground="#ffffff")
        self.TLabel23.configure(font="TkDefaultFont")
        self.TLabel23.configure(relief="flat")
        self.TLabel23.configure(takefocus="0")
        self.TLabel23.configure(text='''默认空调温度''')

        self.TCombobox_deftem = ttk.Combobox(self.Labelframe5)
        self.TCombobox_deftem.place(relx=0.618, rely=0.571, relheight=0.131
                , relwidth=0.151, bordermode='ignore')
        self.value_list = [16,20,25,]
        self.TCombobox_deftem.configure(values=self.value_list)
        self.TCombobox_deftem.configure(textvariable=dashenMQ_new_support.combobox_deftem)
        self.TCombobox_deftem.configure(takefocus="")

        self.TLabel24 = ttk.Label(self.Labelframe5)
        self.TLabel24.place(relx=0.473, rely=0.743, height=21, width=76
                , bordermode='ignore')
        self.TLabel24.configure(background="#78C300")
        self.TLabel24.configure(foreground="#ffffff")
        self.TLabel24.configure(font="TkDefaultFont")
        self.TLabel24.configure(relief="flat")
        self.TLabel24.configure(takefocus="0")
        self.TLabel24.configure(text='''设置空调度数''')

        self.Scrolledlistbox1 = ScrolledListBox(self.Labelframe5)
        self.Scrolledlistbox1.place(relx=0.618, rely=0.743, relheight=0.12
                , relwidth=0.165, bordermode='ignore')
        self.Scrolledlistbox1.configure(background="white")
        self.Scrolledlistbox1.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(foreground="black")
        self.Scrolledlistbox1.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox1.configure(selectforeground="black")
        self.Scrolledlistbox1.configure(takefocus="0")
        self.Scrolledlistbox1.configure(width=10)

        self.Button_sertem = tk.Button(self.Labelframe5)
        self.Button_sertem.place(relx=0.818, rely=0.743, height=28, width=59
                , bordermode='ignore')
        self.Button_sertem.configure(activebackground="#ececec")
        self.Button_sertem.configure(activeforeground="#000000")
        self.Button_sertem.configure(background="#00BFFF")
        self.Button_sertem.configure(command=dashenMQ_new_support.btn_settemp)
        self.Button_sertem.configure(disabledforeground="#a3a3a3")
        self.Button_sertem.configure(foreground="#ffffff")
        self.Button_sertem.configure(highlightbackground="#d9d9d9")
        self.Button_sertem.configure(highlightcolor="black")
        self.Button_sertem.configure(pady="0")
        self.Button_sertem.configure(takefocus="0")
        self.Button_sertem.configure(text='''确认调温''')

        self.Labelframe6 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe6.place(relx=0.018, rely=0.028, relheight=0.958
                , relwidth=0.544)
        self.Labelframe6.configure(relief='groove')
        self.Labelframe6.configure(foreground="#ffffff")
        self.Labelframe6.configure(text='''语音助手设置''')
        self.Labelframe6.configure(background="#496fd8")
        self.Labelframe6.configure(highlightbackground="#d9d9d9")
        self.Labelframe6.configure(highlightcolor="black")
        self.Labelframe6.configure(width=310)

        self.TLabel25 = ttk.Label(self.Labelframe6)
        self.TLabel25.place(relx=0.032, rely=0.116, height=21, width=52
                , bordermode='ignore')
        self.TLabel25.configure(background="#78C300")
        self.TLabel25.configure(foreground="#ffffff")
        self.TLabel25.configure(font="TkDefaultFont")
        self.TLabel25.configure(relief="flat")
        self.TLabel25.configure(text='''语速设置''')
        tooltip_font = "-family {Microsoft YaHei UI} -size 9"
        ToolTip(self.TLabel25, tooltip_font, '''语速设置从0到10，依次增加''', delay=0.5)

        self.TLabel26 = ttk.Label(self.Labelframe6)
        self.TLabel26.place(relx=0.032, rely=0.232, height=21, width=52
                , bordermode='ignore')
        self.TLabel26.configure(background="#78C300")
        self.TLabel26.configure(foreground="#ffffff")
        self.TLabel26.configure(font="TkDefaultFont")
        self.TLabel26.configure(relief="flat")
        self.TLabel26.configure(text='''语调设置''')
        tooltip_font = "-family {Microsoft YaHei UI} -size 9"
        ToolTip(self.TLabel26, tooltip_font, '''语调设置从0到10，依次增加''', delay=0.5)

        self.TLabel27 = ttk.Label(self.Labelframe6)
        self.TLabel27.place(relx=0.032, rely=0.377, height=21, width=52
                , bordermode='ignore')
        self.TLabel27.configure(background="#78C300")
        self.TLabel27.configure(foreground="#ffffff")
        self.TLabel27.configure(font="TkDefaultFont")
        self.TLabel27.configure(relief="flat")
        self.TLabel27.configure(text='''音量设置''')
        tooltip_font = "-family {Microsoft YaHei UI} -size 9"
        ToolTip(self.TLabel27, tooltip_font, '''音调设置从0到10，依次增加''', delay=0.5)

        self.TLabel28 = ttk.Label(self.Labelframe6)
        self.TLabel28.place(relx=0.032, rely=0.522, height=21, width=64
                , bordermode='ignore')
        self.TLabel28.configure(background="#78C300")
        self.TLabel28.configure(foreground="#ffffff")
        self.TLabel28.configure(font="TkDefaultFont")
        self.TLabel28.configure(relief="flat")
        self.TLabel28.configure(text='''发音人设置''')
        tooltip_font = "-family {Microsoft YaHei UI} -size 9"
        ToolTip(self.TLabel28, tooltip_font, '''发音人总共支持5种，从小到大分别是
普通男，普通女，情感男，情感女，萝莉女，职场女''', delay=0.5)

        self.Spinbox_spd = tk.Spinbox(self.Labelframe6, from_=1.0, to=100.0)
        self.Spinbox_spd.place(relx=0.258, rely=0.116, relheight=0.061
                , relwidth=0.5, bordermode='ignore')
        self.Spinbox_spd.configure(activebackground="#f9f9f9")
        self.Spinbox_spd.configure(background="white")
        self.Spinbox_spd.configure(buttonbackground="#d9d9d9")
        self.Spinbox_spd.configure(disabledforeground="#a3a3a3")
        self.Spinbox_spd.configure(font=font9)
        self.Spinbox_spd.configure(foreground="black")
        self.Spinbox_spd.configure(highlightbackground="black")
        self.Spinbox_spd.configure(highlightcolor="black")
        self.Spinbox_spd.configure(insertbackground="black")
        self.Spinbox_spd.configure(selectbackground="#c4c4c4")
        self.Spinbox_spd.configure(selectforeground="black")
        self.Spinbox_spd.configure(textvariable=dashenMQ_new_support.spinbox_setspd)
        self.value_list = [0,1,2,3,4,5,6,7,]
        self.Spinbox_spd.configure(values=self.value_list)

        self.Spinbox_pit = tk.Spinbox(self.Labelframe6, from_=1.0, to=100.0)
        self.Spinbox_pit.place(relx=0.258, rely=0.232, relheight=0.061
                , relwidth=0.5, bordermode='ignore')
        self.Spinbox_pit.configure(activebackground="#f9f9f9")
        self.Spinbox_pit.configure(background="white")
        self.Spinbox_pit.configure(buttonbackground="#d9d9d9")
        self.Spinbox_pit.configure(disabledforeground="#a3a3a3")
        self.Spinbox_pit.configure(font=font9)
        self.Spinbox_pit.configure(foreground="black")
        self.Spinbox_pit.configure(highlightbackground="black")
        self.Spinbox_pit.configure(highlightcolor="black")
        self.Spinbox_pit.configure(insertbackground="black")
        self.Spinbox_pit.configure(selectbackground="#c4c4c4")
        self.Spinbox_pit.configure(selectforeground="black")
        self.Spinbox_pit.configure(textvariable=dashenMQ_new_support.spinbox_setpit)
        self.value_list = [0,1,2,3,4,5,6,7,8,9,10,]
        self.Spinbox_pit.configure(values=self.value_list)

        self.Spinbox_vol = tk.Spinbox(self.Labelframe6, from_=1.0, to=100.0)
        self.Spinbox_vol.place(relx=0.258, rely=0.377, relheight=0.061
                , relwidth=0.5, bordermode='ignore')
        self.Spinbox_vol.configure(activebackground="#f9f9f9")
        self.Spinbox_vol.configure(background="white")
        self.Spinbox_vol.configure(buttonbackground="#d9d9d9")
        self.Spinbox_vol.configure(disabledforeground="#a3a3a3")
        self.Spinbox_vol.configure(font=font9)
        self.Spinbox_vol.configure(foreground="black")
        self.Spinbox_vol.configure(highlightbackground="black")
        self.Spinbox_vol.configure(highlightcolor="black")
        self.Spinbox_vol.configure(insertbackground="black")
        self.Spinbox_vol.configure(selectbackground="#c4c4c4")
        self.Spinbox_vol.configure(selectforeground="black")
        self.Spinbox_vol.configure(textvariable=dashenMQ_new_support.spinbox_setvol)
        self.value_list = [0,1,2,3,4,5,6,7,8,9,10,]
        self.Spinbox_vol.configure(values=self.value_list)

        self.Spinbox_per = tk.Spinbox(self.Labelframe6, from_=1.0, to=100.0)
        self.Spinbox_per.place(relx=0.258, rely=0.522, relheight=0.061
                , relwidth=0.5, bordermode='ignore')
        self.Spinbox_per.configure(activebackground="#f9f9f9")
        self.Spinbox_per.configure(background="white")
        self.Spinbox_per.configure(buttonbackground="#d9d9d9")
        self.Spinbox_per.configure(disabledforeground="#a3a3a3")
        self.Spinbox_per.configure(font=font9)
        self.Spinbox_per.configure(foreground="black")
        self.Spinbox_per.configure(highlightbackground="black")
        self.Spinbox_per.configure(highlightcolor="black")
        self.Spinbox_per.configure(insertbackground="black")
        self.Spinbox_per.configure(selectbackground="#c4c4c4")
        self.Spinbox_per.configure(selectforeground="black")
        self.Spinbox_per.configure(textvariable=dashenMQ_new_support.spinbox_setper)
        self.value_list = [0,1,2,3,4,5,]
        self.Spinbox_per.configure(values=self.value_list)

        self.TCheckbutton_yuyinopen = ttk.Checkbutton(self.Labelframe6)
        self.TCheckbutton_yuyinopen.place(relx=0.032, rely=0.667, relwidth=0.403
                , relheight=0.0, height=27, bordermode='ignore')
        self.TCheckbutton_yuyinopen.configure(variable=dashenMQ_new_support.tch58)
        self.TCheckbutton_yuyinopen.configure(takefocus="")
        self.TCheckbutton_yuyinopen.configure(text='''启用消息语音通知''')

        self.Button_readset = tk.Button(self.Labelframe6)
        self.Button_readset.place(relx=0.355, rely=0.87, height=28, width=83
                , bordermode='ignore')
        self.Button_readset.configure(activebackground="#ececec")
        self.Button_readset.configure(activeforeground="#000000")
        self.Button_readset.configure(background="#00BFFF")
        self.Button_readset.configure(command=dashenMQ_new_support.btn_readyuyinset)
        self.Button_readset.configure(disabledforeground="#a3a3a3")
        self.Button_readset.configure(foreground="#ffffff")
        self.Button_readset.configure(highlightbackground="#d9d9d9")
        self.Button_readset.configure(highlightcolor="black")
        self.Button_readset.configure(pady="0")
        self.Button_readset.configure(text='''查看设置说明''')

        self.Button_saveyuyinset = tk.Button(self.Labelframe6)
        self.Button_saveyuyinset.place(relx=0.516, rely=0.754, height=28
                , width=79, bordermode='ignore')
        self.Button_saveyuyinset.configure(activebackground="#ececec")
        self.Button_saveyuyinset.configure(activeforeground="#000000")
        self.Button_saveyuyinset.configure(background="#00BFFF")
        self.Button_saveyuyinset.configure(command=dashenMQ_new_support.btn_saveyuyinset)
        self.Button_saveyuyinset.configure(disabledforeground="#a3a3a3")
        self.Button_saveyuyinset.configure(foreground="#ffffff")
        self.Button_saveyuyinset.configure(highlightbackground="#d9d9d9")
        self.Button_saveyuyinset.configure(highlightcolor="black")
        self.Button_saveyuyinset.configure(pady="0")
        self.Button_saveyuyinset.configure(text='''保存助手设置''')

        self.TButton_setup = ttk.Button(self.Labelframe6)
        self.TButton_setup.place(relx=0.032, rely=0.87, height=27, width=87
                , bordermode='ignore')
        self.TButton_setup.configure(command=dashenMQ_new_support.btn_setupyuyin)
        self.TButton_setup.configure(takefocus="")
        self.TButton_setup.configure(text='''安装语音助手''')

        self.TButton_uninstall = ttk.Button(self.Labelframe6)
        self.TButton_uninstall.place(relx=0.645, rely=0.87, height=27, width=87
                , bordermode='ignore')
        self.TButton_uninstall.configure(command=dashenMQ_new_support.btn_uninstallyuyin)
        self.TButton_uninstall.configure(takefocus="")
        self.TButton_uninstall.configure(text='''卸载语音助手''')

        self.TCheckbutton_delyuyin = ttk.Checkbutton(self.Labelframe6)
        self.TCheckbutton_delyuyin.place(relx=0.032, rely=0.754, relwidth=0.403
                , relheight=0.0, height=26, bordermode='ignore')
        self.TCheckbutton_delyuyin.configure(variable=dashenMQ_new_support.varcheck_delyuyin)
        self.TCheckbutton_delyuyin.configure(takefocus="")
        self.TCheckbutton_delyuyin.configure(text='''自动删除语音文件''')
        tooltip_font = "-family {Microsoft YaHei UI} -size 9"
        ToolTip(self.TCheckbutton_delyuyin, tooltip_font, '''勾选本选项后，每次收到的语音消息
将在程序结束后自动删除，不可保存''', delay=0.5)

        self.TCheckbutton4 = ttk.Checkbutton(self.Labelframe6)
        self.TCheckbutton4.place(relx=0.516, rely=0.667, relwidth=0.323
                , relheight=0.0, height=25, bordermode='ignore')
        self.TCheckbutton4.configure(variable=dashenMQ_new_support.tch44)
        self.TCheckbutton4.configure(takefocus="")
        self.TCheckbutton4.configure(text='''启用消息滴滴''')

        self.Labelframe7 = tk.LabelFrame(self.TNotebook1_t4)
        self.Labelframe7.place(relx=0.579, rely=0.028, relheight=0.958
                , relwidth=0.421)
        self.Labelframe7.configure(relief='groove')
        self.Labelframe7.configure(foreground="#4040ff")
        self.Labelframe7.configure(text='''下载进度展示栏''')
        self.Labelframe7.configure(background="#d9d9d9")
        self.Labelframe7.configure(highlightbackground="#d9d9d9")
        self.Labelframe7.configure(highlightcolor="black")
        self.Labelframe7.configure(width=240)

        self.Scrolledlistbox_xiazai = ScrolledListBox(self.Labelframe7)
        self.Scrolledlistbox_xiazai.place(relx=0.0, rely=0.058, relheight=0.901
                , relwidth=0.963, bordermode='ignore')
        self.Scrolledlistbox_xiazai.configure(background="white")
        self.Scrolledlistbox_xiazai.configure(disabledforeground="#a3a3a3")
        self.Scrolledlistbox_xiazai.configure(font=font10)
        self.Scrolledlistbox_xiazai.configure(foreground="black")
        self.Scrolledlistbox_xiazai.configure(highlightbackground="#d9d9d9")
        self.Scrolledlistbox_xiazai.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox_xiazai.configure(selectbackground="#c4c4c4")
        self.Scrolledlistbox_xiazai.configure(selectforeground="black")
        self.Scrolledlistbox_xiazai.configure(width=10)
        self.Scrolledlistbox_xiazai.configure(listvariable=dashenMQ_new_support.list_xiazai)

        self.Button_phone = tk.Button(self.TNotebook1_t5)
        self.Button_phone.place(relx=0.018, rely=0.389, height=28, width=229)
        self.Button_phone.configure(activebackground="#ececec")
        self.Button_phone.configure(activeforeground="#000000")
        self.Button_phone.configure(background="#78C300")
        self.Button_phone.configure(command=dashenMQ_new_support.btn_phone)
        self.Button_phone.configure(disabledforeground="#a3a3a3")
        self.Button_phone.configure(foreground="#ffffff")
        self.Button_phone.configure(highlightbackground="#d9d9d9")
        self.Button_phone.configure(highlightcolor="black")
        self.Button_phone.configure(pady="0")
        self.Button_phone.configure(text='''开启通话''')

        self.TCombobox_person = ttk.Combobox(self.TNotebook1_t5)
        self.TCombobox_person.place(relx=0.123, rely=0.111, relheight=0.064
                , relwidth=0.286)
        self.value_list = ["小燕子","达神",]
        self.TCombobox_person.configure(values=self.value_list)
        self.TCombobox_person.configure(textvariable=dashenMQ_new_support.varperson)
        self.TCombobox_person.configure(takefocus="")

        self.TLabel29 = ttk.Label(self.TNotebook1_t5)
        self.TLabel29.place(relx=0.018, rely=0.111, height=21, width=52)
        self.TLabel29.configure(background="#78C300")
        self.TLabel29.configure(foreground="#ffffff")
        self.TLabel29.configure(font="TkDefaultFont")
        self.TLabel29.configure(relief="flat")
        self.TLabel29.configure(text='''通话对象''')

        self.TLabel30 = ttk.Label(self.TNotebook1_t5)
        self.TLabel30.place(relx=0.018, rely=0.25, height=21, width=52)
        self.TLabel30.configure(background="#78C300")
        self.TLabel30.configure(foreground="#ffffff")
        self.TLabel30.configure(font="TkDefaultFont")
        self.TLabel30.configure(relief="flat")
        self.TLabel30.configure(text='''延迟时间''')

        self.TCombobox_delay = ttk.Combobox(self.TNotebook1_t5)
        self.TCombobox_delay.place(relx=0.123, rely=0.25, relheight=0.064
                , relwidth=0.286)
        self.value_list = [300,1000,2000,]
        self.TCombobox_delay.configure(values=self.value_list)
        self.TCombobox_delay.configure(textvariable=dashenMQ_new_support.vardelay)
        self.TCombobox_delay.configure(takefocus="")

        self.Button_listen = tk.Button(self.TNotebook1_t5)
        self.Button_listen.place(relx=0.649, rely=0.25, height=28, width=145)
        self.Button_listen.configure(activebackground="#ececec")
        self.Button_listen.configure(activeforeground="#000000")
        self.Button_listen.configure(background="#78C300")
        self.Button_listen.configure(command=dashenMQ_new_support.btn_listen)
        self.Button_listen.configure(disabledforeground="#a3a3a3")
        self.Button_listen.configure(foreground="#ffffff")
        self.Button_listen.configure(highlightbackground="#d9d9d9")
        self.Button_listen.configure(highlightcolor="black")
        self.Button_listen.configure(pady="0")
        self.Button_listen.configure(text='''试听''')

        self.Button_senluyin = tk.Button(self.TNotebook1_t5)
        self.Button_senluyin.place(relx=0.649, rely=0.389, height=28, width=149)
        self.Button_senluyin.configure(activebackground="#ececec")
        self.Button_senluyin.configure(activeforeground="#000000")
        self.Button_senluyin.configure(background="#78C300")
        self.Button_senluyin.configure(command=dashenMQ_new_support.btn_sendluyin)
        self.Button_senluyin.configure(disabledforeground="#a3a3a3")
        self.Button_senluyin.configure(foreground="#ffffff")
        self.Button_senluyin.configure(highlightbackground="#d9d9d9")
        self.Button_senluyin.configure(highlightcolor="black")
        self.Button_senluyin.configure(pady="0")
        self.Button_senluyin.configure(text='''发送''')

        self.Button_luyin = tk.Button(self.TNotebook1_t5)
        self.Button_luyin.place(relx=0.649, rely=0.111, height=28, width=139)
        self.Button_luyin.configure(activebackground="#ececec")
        self.Button_luyin.configure(activeforeground="#000000")
        self.Button_luyin.configure(background="#78C300")
        self.Button_luyin.configure(command=dashenMQ_new_support.btn_luyin)
        self.Button_luyin.configure(disabledforeground="#a3a3a3")
        self.Button_luyin.configure(foreground="#ffffff")
        self.Button_luyin.configure(highlightbackground="#d9d9d9")
        self.Button_luyin.configure(highlightcolor="black")
        self.Button_luyin.configure(pady="0")
        self.Button_luyin.configure(text='''开启录音''')

        self.Spinbox1 = tk.Spinbox(self.TNotebook1_t5, from_=1.0, to=100.0)
        self.Spinbox1.place(relx=0.544, rely=0.111, relheight=0.058
                , relwidth=0.096)
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(buttonbackground="#d9d9d9")
        self.Spinbox1.configure(disabledforeground="#a3a3a3")
        self.Spinbox1.configure(font=font9)
        self.Spinbox1.configure(foreground="black")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(highlightcolor="black")
        self.Spinbox1.configure(insertbackground="black")
        self.Spinbox1.configure(selectbackground="#c4c4c4")
        self.Spinbox1.configure(selectforeground="black")
        self.Spinbox1.configure(textvariable=dashenMQ_new_support.spinbox_luyintime)
        self.value_list = [1,2,3,4,]
        self.Spinbox1.configure(values=self.value_list)
        self.Spinbox1.configure(width=55)

        self.TLabel31 = ttk.Label(self.TNotebook1_t5)
        self.TLabel31.place(relx=0.474, rely=0.111, height=21, width=28)
        self.TLabel31.configure(background="#78C300")
        self.TLabel31.configure(foreground="#ffffff")
        self.TLabel31.configure(font="TkDefaultFont")
        self.TLabel31.configure(relief="flat")
        self.TLabel31.configure(text='''秒数''')

        self.Button_connect = tk.Button(top)
        self.Button_connect.place(relx=0.017, rely=0.023, height=28, width=100)
        self.Button_connect.configure(activebackground="#ececec")
        self.Button_connect.configure(activeforeground="#000000")
        self.Button_connect.configure(background="#00BFFF")
        self.Button_connect.configure(command=dashenMQ_new_support.btn_connect)
        self.Button_connect.configure(disabledforeground="#a3a3a3")
        self.Button_connect.configure(foreground="#ffffff")
        self.Button_connect.configure(highlightbackground="#d9d9d9")
        self.Button_connect.configure(highlightcolor="black")
        self.Button_connect.configure(pady="0")
        self.Button_connect.configure(takefocus="0")
        self.Button_connect.configure(text='''开始连接''')

        self.TProgressbar1 = ttk.Progressbar(top)
        self.TProgressbar1.place(relx=0.633, rely=0.023, relwidth=0.25
                , relheight=0.0, height=22)
        self.TProgressbar1.configure(variable=dashenMQ_new_support.tpb_send)
        self.TProgressbar1.configure(value="0.5")
        self.TProgressbar1.configure(takefocus="0")

        self.TLabel_jindu = ttk.Label(top)
        self.TLabel_jindu.place(relx=0.883, rely=0.023, height=21, width=50)
        self.TLabel_jindu.configure(background="#00BFFF")
        self.TLabel_jindu.configure(foreground="#ffffff")
        self.TLabel_jindu.configure(font="TkDefaultFont")
        self.TLabel_jindu.configure(relief="flat")
        self.TLabel_jindu.configure(takefocus="0")
        self.TLabel_jindu.configure(textvariable=dashenMQ_new_support.labletv_jindu)

        self.TEntry_filepath = ttk.Entry(top)
        self.TEntry_filepath.place(relx=0.25, rely=0.023, relheight=0.053
                , relwidth=0.36)
        self.TEntry_filepath.configure(textvariable=dashenMQ_new_support.entrytv_filepath)
        self.TEntry_filepath.configure(takefocus="")
        self.TEntry_filepath.configure(cursor="ibeam")

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#f9f9f9")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="black")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(font="{Microsoft YaHei UI} 9")
        Popupmenu1.configure(foreground="black")
        Popupmenu1.post(event.x_root, event.y_root)

# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





